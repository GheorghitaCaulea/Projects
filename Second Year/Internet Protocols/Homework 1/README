Student: CAULEA Gheorghita
Grupa:   324CB

	In inceputul implementarii am creat o serie de functii ajutatoare, functii a caror descriere se gaseste in codul sursa. Pentru primul tip de pachet, 'S' in SENDER, imi creez o structura de tip 'min_ker'(pe care am definit-o in lib.h), o convertesc intr-un vector de caractere apoi cu 'memcpy' o copiez in payload. Cat timp nu voi avea trei Time-Out-ri consecutive, voi retrimite pachetul pana la primirea unui mesaj de confirmare(actualizez numarul de secventa cand retrimit). In REVEIVER astept cat timp nu am trei Time-Out-ri consecutive mesajul. Daca mesajul nu e NULL, verific daca nu e corupt si trimit un pachet care sa semnifice asta(un pache de tip 'Y' sau 'N').
	
	Pentru pachetul de tip 'F' in SENDER creez structura potrivita pachetului, o convertesc si o pun in payload. Cat timp nu voi avea trei Time-Out-ri consecutive sau un numar de secventa sincronizat cu cel asteptat, voi retrimite pachetul anterior pana la primirea unui mesaj de confirmare(actualizez numarul de secventa cand retrimit). In RECEIVER astept cat timp nu am trei Time-Out-ri consecutive mesajul. Daca mesajul e NULL sau numarul de secventa nu e cel asteptat, retrimit mesajul anterior. Daca mesajul nu e NULL dar e corupt, trimit un mesaj cu un pache de tip 'N' cu un numar de secventa actualizat. In cazul in care mesajul e corect(nu e NULL si nici corupt) iau din campul data al structurii create dupa payload-ul mesajului primit numarul fisierului si il deschid pentru scriere. Trimit un mesaj cu un pachet de tip 'Y'.
	
	Pentru pachetul de tip 'D' in SENDER citesc din fisier date, le pun in structuri pe care le convertesc si le pun in payload. Pentru fiecare pachet voi astepta cat timp nu voi avea trei Time-Out-ri consecutive sau un numar de secventa sincronizat cu cel asteptat, voi retrimite pachetul anterior pana la primirea unui mesaj de confirmare(actualizez numarul de secventa cand retrimit). In RECEIVER astept cat timp nu am trei Time-Out-ri consecutive mesajul. Daca mesajul e NULL sau numarul de secventa nu e cel asteptat, retrimit mesajul anterior. Daca mesajul nu e NULL dar e corupt, trimit un mesaj cu un pachet de tip 'N' cu un numar de secventa actualizat. In cazul in care mesajul e corect(nu e NULL si nici corupt) trimit un mesaj cu un pachet de tipul 'Y' si iau din campul data datele si le scriu in fisier. Tot pe brach-ul cand mesajul e corect verific daca e mesaj de tip 'Z', caz in care ma opresc si inchid fisierul.

	Pentru pachetul de tip 'Z' in SENDER creez structura potrivita pachetului, o convertesc si o pun in payload. Cat timp nu voi avea trei Time-Out-ri consecutive sau un numar de secventa sincronizat cu cel asteptat, voi retrimite pachetul anterior pana la primirea unui mesaj de confirmare(actualizez numarul de secventa cand retrimit) . In RECEIVER astept cat timp nu am trei Time-Out-ri consecutive mesajul. Daca mesajul e NULL sau numarul de secventa nu e cel asteptat, retrimit mesajul anterior. Daca mesajul nu e NULL dar e corupt, trimit un mesaj cu un pache de tip 'N' cu un numar de secventa actualizat. In cazul in care mesajul e corect(nu e NULL si nici corupt) inchid fisierul in care am terminat scrierea. Trimit un mesaj cu un pachet de tip 'Y'.

	Pentru pachetul de tip 'B' in SENDER creez structura potrivita pachetului, o convertesc si o pun in payload. Cat timp nu voi avea trei Time-Out-ri consecutive sau un numar de secventa sincronizat cu cel asteptat, voi retrimite pachetul anterior pana la primirea unui mesaj de confirmare(actualizez numarul de secventa cand retrimit). In RECEIVER astept cat timp nu am trei Time-Out-ri consecutive mesajul. Daca mesajul e NULL sau numarul de secventa nu e cel asteptat, retrimit mesajul anterior. Daca mesajul nu e NULL dar e corupt, trimit un mesaj cu un pache de tip 'N' cu un numar de secventa actualizat. In cazul in care mesajul e corect(nu e NULL si nici corupt) inchid transmisia, afisez un mesaj corespunzator si Trimit un mesaj cu un pachet de tip 'Y'. Voi inchide si in SENDER transmisia la primirea mesajului de confirmare.
	
	Tipurile 'F', 'D' si 'B' vor fi incluse atat in SENDER cat si in RECEIVER intr-un 'for', respectiv un while care se vor repeta de un numar de ori egal cu numarul de fisiere de transmis.
	
	
